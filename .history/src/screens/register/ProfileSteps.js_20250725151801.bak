"use client"

import { useState, useEffect } from "react"
import { View, Text, TouchableOpacity, StyleSheet, Dimensions, ScrollView, TextInput } from "react-native"
import AsyncStorage from "@react-native-async-storage/async-storage"
import { showErrorFetchAPI, showSuccessMessage } from "utils/toastUtil"
import { profileService } from "services/apiProfileService"
import { apiUserService } from "services/apiUserService"
import { useContext } from "react"
import { AuthContext } from "context/AuthContext"
import { SafeAreaView } from "react-native-safe-area-context"
import { useNavigation } from "@react-navigation/native"

const screenDimensions = Dimensions.get("window")
const GENDER_OPTIONS = ["Male", "Female", "Other"]

export default function ProfileSteps({
  currentStep = 0,
  formData: _formData,
  handleChange: _handleChange,
  handleToggle: _handleToggle,
  handleSelect: _handleSelect,
  setShowDatePicker = () => {},
  setShowGenderOptions = () => {},
  formatDate = (date) => date?.toDateString() || "",
  calculateAge = () => 0,
  errors = {},
  onComplete = () => {},
}) {
  const [formData, setFormData] = useState(_formData || {})
  const [isLoading, setIsLoading] = useState(false)
  const [showRecommendations, setShowRecommendations] = useState(false)
  const [calculatedBMI, setCalculatedBMI] = useState(null)
  const [calorieGoal, setCalorieGoal] = useState(null)
  const [step, setStep] = useState(currentStep || 0)
  const [validationErrors, setValidationErrors] = useState({})
  const { user } = useContext(AuthContext)
  const navigation = useNavigation()

  // Persist formData and step to AsyncStorage whenever they change
  const persistProfileState = async (nextFormData, nextStep) => {
    try {
      await AsyncStorage.setItem("profileFormData", JSON.stringify(nextFormData))
      await AsyncStorage.setItem("profileCurrentStep", String(nextStep))
    } catch (e) {
      console.warn("[ProfileSteps] Failed to persist state", e)
    }
  }

  // Reusable navigation handler with logging
  const handleNavigation = (screen, params) => {
    console.log(`[handleNavigation] Navigating to:`, screen, params || '');
    navigation.navigate(screen, params);
  };

  const handleChange = (key, value) => {
    setFormData((prev) => {
      const updated = { ...prev, [key]: value }
      persistProfileState(updated, step)
      console.log("[ProfileSteps] handleChange:", key, value, updated)
      return updated
    })
    // Clear validation error when user starts typing
    if (validationErrors[key]) {
      setValidationErrors((prev) => ({ ...prev, [key]: null }))
    }
  }

  const handleSelect = (key, value) => {
    setFormData((prev) => {
      const updated = { ...prev, [key]: value }
      persistProfileState(updated, step)
      console.log("[ProfileSteps] handleSelect:", key, value, updated)
      return updated
    })
    // Clear validation error when user selects
    if (validationErrors[key]) {
      setValidationErrors((prev) => ({ ...prev, [key]: null }))
    }
  }

  const handleToggle = (key, value) => {
    setFormData((prev) => {
      let updated
      if (Array.isArray(prev[key])) {
        if (prev[key].includes(value)) {
          updated = { ...prev, [key]: prev[key].filter((v) => v !== value) }
        } else {
          updated = { ...prev, [key]: [...prev[key], value] }
        }
      } else {
        updated = { ...prev, [key]: [value] }
      }
      persistProfileState(updated, step)
      console.log("[ProfileSteps] handleToggle:", key, value, updated)
      return updated
    })
    // Clear validation error when user toggles
    if (validationErrors[key]) {
      setValidationErrors((prev) => ({ ...prev, [key]: null }))
    }
  }

  useEffect(() => {
    console.log("userId", user?.userId)
    if (formData?.height && formData?.weight) {
      const heightInM = Number.parseFloat(formData.height) / 100
      const weightInKg = Number.parseFloat(formData.weight)
      if (heightInM > 0 && weightInKg > 0) {
        const bmi = (weightInKg / (heightInM * heightInM)).toFixed(1)
        setCalculatedBMI(Number.parseFloat(bmi))
      }
    }
  }, [formData?.height, formData?.weight])

  const calculateCalorieGoal = () => {
    if (!formData?.height || !formData?.weight || !formData?.age || !formData?.gender) {
      return 1500
    }
    const age = Number.parseInt(formData?.age || "25")
    const heightInCm = Number.parseFloat(formData?.height || "")
    const weightInKg = Number.parseFloat(formData?.weight || "")
    const isMale = formData?.gender === "Male"

    let bmr
    if (isMale) {
      bmr = 88.362 + 13.397 * weightInKg + 4.799 * heightInCm - 5.677 * age
    } else {
      bmr = 447.593 + 9.247 * weightInKg + 3.098 * heightInCm - 4.33 * age
    }

    const activityMultipliers = {
      Sedentary: 1.2,
      "Lightly Active": 1.375,
      "Moderately Active": 1.55,
      "Very Active": 1.725,
      "Extremely Active": 1.9,
    }

    const multiplier = activityMultipliers[formData?.activityLevel || ""] || 1.2
    let tdee = bmr * multiplier

    if (formData?.fitnessGoal === "Weight Loss") {
      tdee -= 500
    } else if (formData?.fitnessGoal === "Muscle Gain") {
      tdee += 300
    }

    return Math.round(tdee)
  }

  // ...existing code...
// Styles
const styles = StyleSheet.create({
  // ...existing code...
})

